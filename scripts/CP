#!/bin/sh

compile_flags='-Wall -Wextra -Wpedantic -Wshadow -DLOCAL'
clangd_config="$compile_flags -Wno-unknown-pragmas"
debug_flags='-g -fsanitize=address,undefined -fno-omit-frame-pointer -fno-inline'

setup() {
  test -f compile_flags.txt || echo "$compile_flags" | tr ' ' '\n' >compile_flags.txt
  if [ ! -f .clangd ]; then
    printf 'CompileFlags:\n\tAdd:' >.clangd
    echo "$clangd_config" | tr ' ' '\n' | while read -r flag; do
      printf '\n\t\t- %s' "$flag" >>.clangd
    done
  fi

  if [ ! -f .clang-format ]; then
    echo 'BasedOnStyle: Google' >.clang-format
    for i in Blocks CaseLabels CompoundRequirement Enums Functions IfStatements Lambdas Loops; do
      printf 'AllowShort%sOnASingleLine: false\n' "$i" >>.clang-format
    done
  fi
}

run() {
  file="$1"
  input="$2"
  output="$3"
  exe="$4"
  shift 4
  args="$*"

  test -f "$exe" && rm "$exe"

  if [ "${file##*.}" = 'py' ]; then
    exe="python $file"
    code=0
  else
    g++ @compile_flags.txt $args "$file" -o "$exe" 2>"$output"
    code=$?
  fi
  if [ $code -gt 0 ]; then
    printf '\n[code]: %s' $code >>"$output"
    exit $code
  else
    echo '' >"$output"
  fi

  start=$(date '+%s.%N')
  timeout 2s $exe <"$input" >"$output" 2>&1
  code=$?
  if [ "$(wc -l <"$output")" -gt 1000 ]; then
    sed -i '1001,$d' "$output"
  fi
  end=$(date '+%s.%N')

  if [ $code -ge 124 ]; then
    code=$((code - 124))
    msg=''
    case $code in
    0)
      code=124
      msg='TIMEOUT'
      ;;
    4)
      msg='SIGILL'
      ;;
    6)
      msg='SIGABRT'
      ;;
    7)
      msg='SIGBUS'
      ;;
    12)
      msg='SIGFPE'
      ;;
    11)
      msg='SIGSEGV'
      ;;
    13)
      msg='SIGPIPE'
      ;;
    15)
      msg='SIGTERM'
      ;;
    esac

    # remove `timeout`'s message
    [ $code -ne 124 ] && sed -i '$d' "$output"

    test -n "$msg" && printf '\n[code]: %s (%s)' "$code" "$msg" >>"$output"
  else
    printf '\n[code]: %s' $code >>"$output"
  fi

  delta=$(awk "BEGIN {print ($end - $start) * 1000}")
  printf '\n[time]: %s ms' "$delta" >>"$output"

  exit $code
}

cmd="$1"
file="$2"
version="$3"
[ "$version" ] && compile_flags="$compile_flags -std=c++$version"

base_name="${file##*/}"
base_name="${base_name%.*}"

input="${base_name}.in"
output="${base_name}.out"
exe="${base_name}.$cmd"
[ "${exe##*.}" = debug ] && flags="$debug_flags"

setup "$input" "$output"

run "$file" "$input" "$output" "./$exe" "$flags"
